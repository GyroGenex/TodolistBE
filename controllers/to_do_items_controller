const mongoose = require('mongoose');
const toDoItemModel = require('../models/ToDoItemsModel');


const controllers = {

    //Get open tasks
    getOpenTasks: async (req, res) => {

        const items = await toDoItemModel.find(
            { assignedTo: [] });
        res.json(items);
    },

    getCreatedByUser: async (req, res) => {
        try {
          const items = await toDoItemModel.find({ createdBy: req.params.userId });
          res.json(items);
        } catch (error) {
          console.error(error);
          res.status(500).json({ message: 'Server error' });
        }
      },
    //User to check tasks specific only to them
        // getToDoItems:  async (req, res) => {
        //     try {
        //         const todoItems = await ToDoItem.find({ createdBy: req.user.id });
        //         res.json(todoItems);
        //     } catch (err) {
        //         console.error(err);
        //         res.status(500).json({ message: "Server error" });
        //     }
        // },

    //User to get tasks details, no need for authorisation here i think as anyone can see the open tasks



    getItemDetail: async (req, res) => {
        const itemId = req.params.itemId;
        console.log(itemId);
        let toDoItem = null;

        try {
            // use model to find by id
            toDoItem = await toDoItemModel.findById(itemId);
        } catch (err) {
            // if any error -> return response 500
            res.statusCode = 500;
            return res.json();
        }

        // if not exists -> return response 404
        if (!toDoItem) {
            console.log('does not exists');
            res.statusCode = 404;
            return res.json();
        }

        return res.json(toDoItem);
    },

    //create to do item, user only needs to provide todoitem, who they want to assign to or leave it as open tasks, priority and if it is a repeating task.
    //status will be default open but if assigned alrdy can set status as assigned instead.
    createToDoItem: async (req, res) => {
        // get data from request
        const data = req.body;
        console.log(data);
    
        //insert to DB using model
        const result = await toDoItemModel.create({
            toDoItem: data.toDoItem,
            details: data.details,
            createdBy: res.locals.authUserID,
            assignedTo: data.assignedTo, // This should now be an array of user ids
            deadline: data.deadline,
            priority: data.priority,
            repeating: data.repeating,
            status: "Open"
        },);
    
        // update the assigned users' todoItems list
        if(data.assignedTo) {
            for(let userId of data.assignedTo) {
                const user = await userModel.findById(userId);
                user.todoItems.push(result._id);
                await user.save();
            }
        }
    
        res.statusCode = 201;
        res.json({
            msg: "Created successfully"
        });
    
    },

    //Users are able to change the details, assignedto if they feel it is not assigned to them correctly add collaborators, deadline if require extension,
    //and status.
    updateToDoItem: async (req, res) => {
        const data = req.body;
        //can only update details, deadline and status
        console.log(data.status);

        // TODO: validation

        // try get the item from DB, if not exists, return 404 not found response
        let item = null; // -> will evaluate to a falsy value

        try {
            item = await toDoItemModel.findById(req.params.itemId);
        } catch (err) {
            console.log(err);
            res.statusCode = 500;
            return res.json();
        }

        if (!item) {
            res.statusCode = 404;
            return res.json();
        }

        console.log(item);


        // use menu item model to update into database
        try {
            await toDoItemModel.updateOne(
                {
                    _id: req.params.itemId
                },
                {
                    toDoItem: item.toDoItem,
                    details: data.details,
                    assignedTo: item.assignedTo,
                    deadline: data.deadline,
                    priority: item.priority,
                    repeating: item.repeating,
                    status: data.status
                }
            );
        } catch (err) {
            console.log(err);
            res.statusCode = 500;
            return res.json();
        }

        console.log('updated');

        res.json();
    },

    //user can delete tasks, but abit flawed as anyone can delete the task i guess?
    deleteToDoItems: async (req, res) => {
        const data = req.body;


        // try get the item from DB, if not exists, return 404 not found response
        let item = null; // -> will evaluate to a falsy value

        try {
            item = await toDoItemModel.findById(req.params.itemId);
        } catch (err) {
            console.log(err);
            res.statusCode = 500;
            return res.json();
        }

        if (!item) {
            res.statusCode = 404;
            return res.json();
        }

        console.log(item);


        // use menu item model to update into database
        try {
            await toDoItemModel.deleteOne(
                {
                    _id: req.params.itemId
                }
            );
        } catch (err) {
            console.log(err);
            res.statusCode = 500;
            return res.json();
        }

        console.log('Task deleted');

        res.json();

    },
    

  
  getAssignedToUser: async (req, res) => {
    try {
      const items = await ToDoItem.find({ assignedTo: req.params.userId });
      res.json(items);
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Server error' });
    }
  },

};

module.exports = controllers;
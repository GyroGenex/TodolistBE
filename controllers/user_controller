const bcrypt = require('bcrypt');
const jwt = require("jsonwebtoken");
const userModel = require("../models/UserModel");
const userValidators = require("./validators/userValidator");

const userControllers = {

    getUserInfo: async (req, res) => {
        // get the authenticated user's ID from res.locals
        const userId = res.locals.authUserID;
    
        // retrieve the user from the database
        try {
            const user = await userModel.findById(userId);
    
            if (!user) {
                res.statusCode = 404;
                return res.json({
                    msg: "user not found"
                });
            }
    
            // respond with the user's data
            res.json({
                id: user._id,
                username: user.username,
                email: user.email,
                // and other fields you want to include
            });
        } catch (err) {
            console.log(err);
            res.statusCode = 500;
            return res.json({
                msg: "failed to fetch user"
            });
        }
    },
    

    register: async (req, res) => {
        // get the registration data in the req
        const data = req.body;
        console.log(data);

        // validate the data (Joi)
        // TODO: validation schema to be extracted to it's own file


        const validationResult = userValidators.registerSchema.validate(data);
        if (validationResult.error) {
            res.statusCode = 400;

            return res.json({
                msg: validationResult.error.details[0].message
            });
        }

        // search for any existing user with same email,
        // return err if so
        try {
            const user = await userModel.findOne({ email: data.email });
            if (user) {
                res.statusCode = 400;
                return res.json({
                    msg: "user with email exists, use another email"
                });
            }
        } catch (err) {
            res.statusCode = 500;
            return res.json({
                msg: "failed to check for duplicates"
            });
        }

        // apply hashing algo (bcrypt) to the given password
        // -> pw hash -> goes into DB
        const hash = await bcrypt.hash(data.password, 10);

        // use user model to create a new user
        try {
            await userModel.create({
                username: data.username,
                email: data.email,
                password: hash,
                notifications: true,
            });
        } catch (err) {
            res.statusCode = 500;
            console.log(err);
            return res.json({

                msg: "failed to create user"
            });
        }

        // return response
        res.json();
    },

    login: async (req, res) => {
        // get the login data from request body
        const data = req.body;
        console.log(data);
        // validate the data

        const validationResult = userValidators.loginSchema.validate(data);

        if (validationResult.error) {
            res.statusCode = 400;
            return res.json({
                msg: validationResult.error.details[0].message
            });
        }

        // find if user exists by the username (email)
        // -> not exists: return login error (status 400)

        let user = null;

        try {
            user = await userModel.findOne({ email: data.email });
        } catch (err) {
            res.statusCode = 500;
            return res.json({
                msg: "error occurred when fetching user"
            });
        }

        if (!user) {
            res.statusCode = 401;
            return res.json({
                msg: "login failed, please check login details"
            });
        }

        // use bcrypt to compare given password against DB record
        // -> if failed: return status 401 (unauthorized)

        const validLogin = await bcrypt.compare(data.password, user.password);

        if (!validLogin) {
            res.statusCode = 401;
            return res.json({
                msg: "login failed, please check login details"
            });
        }

        // generate JWT using an external lib
        const token = jwt.sign(
            {
                username: user.username,
                email: user.email,
            },
            process.env.APP_KEY,
            {
                expiresIn: "10 days",
                audience: "FE",
                issuer: "BE",
                subject: user._id.toString(), // _id from Mongoose is type of ObjectID,
            }
        );

        // return response with JWT
        res.json({
            msg: 'login successful',
            token: token,
        });
    },

    // change user settings
    updateUserDetails: async (req, res) => {
        const data = req.body;
        //can change password and set whether they want notifications
        console.log(res.locals);
        // TODO: validation

        // try get the item from DB, if not exists, return 404 not found response
        let user = null; // -> will evaluate to a falsy value

        try {
            user = await userModel.find(res.locals.username);
        } catch (err) {
            console.log(err);
            res.statusCode = 500;
            return res.json();
        }

        if (!user) {
            res.statusCode = 404;
            return res.json();
        }

        console.log(user);


        const validationResult = userValidators.loginSchema.validate({
            username: user.username,
            email:user.email,
            password: data.password,
            notifications:data.notifications
        });

        if (validationResult.error) {
            res.statusCode = 400;
            return res.json({
                msg: validationResult.error.details[0].message
            });
        }

        // use menu item model to update into database
        try {
            await userModel.updateOne(
                {
                    _id: user._id
                },
                {
                    username: user.username,
                    email: user.email,
                    password: data.password,
                    notifications: data.notifications
                }
            );
        } catch (err) {
            console.log(err);
            res.statusCode = 500;
            return res.json();
        }

        console.log('updated');

        res.json();
    },

    getUserTasks: async (req, res) => {
        try {
          const userId = req.user._id;
      
          const createdTasks = await ToDoItem.find({ createdBy: userId });
          const assignedTasks = await ToDoItem.find({ assignedTo: { $elemMatch: { $eq: userId } } });
      
          const userTasks = createdTasks.concat(assignedTasks);
      
          res.status(200).json(userTasks);
        } catch (error) {
          res.status(500).json({ error: error.message });
        }
      }
      


};

module.exports = userControllers;